!function(e,o){for(var t in o)e[t]=o[t]}(exports,function(e){var o={};function t(r){if(o[r])return o[r].exports;var s=o[r]={i:r,l:!1,exports:{}};return e[r].call(s.exports,s,s.exports,t),s.l=!0,s.exports}return t.m=e,t.c=o,t.d=function(e,o,r){t.o(e,o)||Object.defineProperty(e,o,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,o){if(1&o&&(e=t(e)),8&o)return e;if(4&o&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&o&&"string"!=typeof e)for(var s in e)t.d(r,s,function(o){return e[o]}.bind(null,s));return r},t.n=function(e){var o=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(o,"a",o),o},t.o=function(e,o){return Object.prototype.hasOwnProperty.call(e,o)},t.p="",t(t.s=0)}([function(e,o,t){e.exports.loop=function(){console.log("loop start"),t(1),console.log("import constants");var e=t(2);console.log("import app"),new e(Memory,Game).run(),console.log("loop end")}},function(e,o){global.PRIORITY_LOW="low",global.PRIORITY_MEDIUM="medium",global.PRIORITY_HIGH="high",global.OBJECT_TYPE_COLONY="colony",global.OBJECT_TYPE_SOURCE_OPERATION="sourceOperation",global.OBJECT_TYPE_SOURCE_MEMORY="sourceMemory",global.OBJECT_TYPE_CREEP_ID="creepId",global.CREEP_TYPE_UTILITY="utility",global.CREEP_TYPE_MINER="miner",global.CREEP_TYPE_TRANSPORTER="transporter",global.CREEP_TYPE_CLAIMER="claimer",global.CREEP_TYPE_MELEE="melee",global.CREEP_TYPE_RANGED="ranged",global.CREEP_TYPE_TANK="tank",global.CREEP_TYPE_HEALER="healer",global.COLONY_CREEP_QUEUE_FREE="free",global.COLONY_CREEP_QUEUE_BUSY="busy",global.CREEP_TEMPLATES={CREEP_TYPE_UTILITY:{MOVE:.3,WORK:.3,CARRY:.3,ATTACK:0,RANGED_ATTACK:0,TOUGH:0,HEAL:0,CLAIM:0},CREEP_TYPE_MINER:{MOVE:.1,WORK:.9,CARRY:0,ATTACK:0,RANGED_ATTACK:0,TOUGH:0,HEAL:0,CLAIM:0},CREEP_TYPE_TRANSPORTER:{MOVE:.5,WORK:0,CARRY:.5,ATTACK:0,RANGED_ATTACK:0,TOUGH:0,HEAL:0,CLAIM:0},CREEP_TYPE_CLAIMER:{MOVE:.5,WORK:0,CARRY:0,ATTACK:0,RANGED_ATTACK:0,TOUGH:0,HEAL:0,CLAIM:.5},CREEP_TYPE_MELEE:{MOVE:.5,WORK:0,CARRY:0,ATTACK:.5,RANGED_ATTACK:0,TOUGH:0,HEAL:0,CLAIM:0},CREEP_TYPE_RANGED:{MOVE:.5,WORK:0,CARRY:0,ATTACK:0,RANGED_ATTACK:.5,TOUGH:0,HEAL:0,CLAIM:0},CREEP_TYPE_TANK:{MOVE:.5,WORK:0,CARRY:0,ATTACK:.25,RANGED_ATTACK:0,TOUGH:.25,HEAL:0,CLAIM:0},CREEP_TYPE_HEALER:{MOVE:.5,WORK:0,CARRY:0,ATTACK:0,RANGED_ATTACK:0,TOUGH:0,HEAL:.5,CLAIM:0}}},function(e,o,t){e.exports=function(e,o){if(!e||!o)throw"invalid arguements passed to app.js!";this.game=o,console.log("import managers");const r=t(3);this.memoryManager=new r(e);const s=t(4);this.resourceManager=new s(this.memoryManager,this.game);const n=t(5);this.colonyManager=new n(this.game,this.resourceManager,this.memoryManager),console.log("import managers end"),this.run=function(){console.log("run start");let e=this.memoryManager.getAll(OBJECT_TYPE_COLONY);e||(e=this.mapColonies());for(const o in e){let t=e[o];colonyManager.run(t)}},this.mapColonies=function(){console.log("map colonies"),console.log(JSON.stringify(this.game));for(const e in this.game.rooms){const o=this.game.rooms[e];void 0!==o.controller&&null!==o.controller&&o.controller.my&&this.memoryManager.save(this.colonyManager.createColony(o))}return this.memoryManager.getAll(OBJECT_TYPE_COLONY)}}},function(e,o){e.exports=function(e){this.memory=e,void 0!==this.memory&&void 0!==this.memory.settings||(this.memory={}),this.getAll=function(e){return this.memory[e]},this.getById=function(e,o){return this.memory[e][o]},this.save=function(e){if(!e.objectType)throw"Error: object does not have a valid object type.";return this.memory[e.objectType]||(this.memory[e.objectType]={}),e.id||(e.id=this.getNextId(e.objectType)),this.memory[e.objectType][e.id]=e,e},this.getNextId=function(e){return this.memory.objectIds||(this.memory.objectIds={}),this.memory.objectIds[e]||(this.memory.objectIds[e]=0),this.memory.objectIds[e]++,this.memory.objectIds[e]},this.getNextCreepName=function(){return"Creep_"+this.getNextId(OBJECT_TYPE_CREEP_ID)}}},function(e,o){e.exports=function(e,o){this.memoryManager=e,this.game=o,this.createResourceRequest=function(e,o,t,r,s){if(s){let n=this.memoryManager.getById(OBJECT_TYPE_COLONY,e);return s||(s=PRIORITY_LOW),this.checkColonyResourceRequests(n,r,s),n.resourceRequests[r][s].push({destinationPos:o,amount:t}),this.memoryManager.save(n)}return ERR_INVALID_ARGS},this.assignCreepsToResourceRequests=function(e,o){for(;o.length>0;);},this.checkColonyResourceRequests=function(e,o,t){e.resourceRequests||(e.resourceRequests={}),e.resourceRequests[o]||(e.resourceRequests[o]={}),e.resourceRequests[o][t]||(e.resourceRequests[o][t]=[])},this.getColonyResourceRequests=function(e,o,t){return this.checkColonyResourceRequests(e,o,t),e.resourceRequests[o][t]},this.checkColonyResourceRequirements=function(e){if(e.structureMap)for(const o in e.structureMap){const t=e.structureMap[o];for(const o in t){const t=this.game.getObjectById(o);let r=null;switch(t.structureType){case STRUCTURE_SPAWN:r=this.determineSpawnRequirements(t);break;case STRUCTURE_CONTROLLER:r=this.determineControllerRequirements(t)}r&&(r=this.addResourceRequest(r),e.resourceRequests[r.priority]||(e.resourceRequests[r.priority]=[]),e.resourceRequests[r.priority].push(r.id))}}this.memoryManager.save(e)},this.determineSpawnRequirements=function(e){if(e.memory.creepToSpawn&&!e.memory.requestId){let o=e.energyCapacity-e.energy;return this.createResourceRequest(e.room.colonyId,e.pos,o,RESOURCE_ENERGY,e.memory.creepToSpawn.priority)}},this.determineControllerRequirements=function(e){if(e.level<8)return this.createResourceRequest(e.room.colonyId,e.pos,0,RESOURCE_ENERGY,"low")}}},function(e,o){e.exports=function(e,o,t,r,s,n){this.game=e,this.resourceManager=o,this.memoryManager=t,this.operationManager=r,this.structureMapper=s,this.creepManager=n,this.createColony=function(e){console.log("create colony"),console.log(JSON.stringify(e));let o={id:0,objectType:OBJECT_TYPE_COLONY,structureMap:this.createNewStructureMap(),mainRoom:e.name,rooms:[],resourceRequests:{},spawnQueues:{PRIORITY_HIGH:[],PRIORITY_MEDIUM:[],PRIORITY_LOW:[]}};return o=this.memoryManager.save(o),this.addRoomToColony(o,e),o},this.addRoomToColony=function(e,o){console.log("add room to colony"),console.log(JSON.stringify(o)),o.memory.colonyId?console.log("Warning: this room is already assigned to a colony."):(this.room.memory.colonyId=e.id,e.rooms.push(o),this.memoryManager.save(e))},this.addSourceToColony=function(e,o){if(e&&o)return e.sources||(e.sources={}),e.sources[o.id]||(e.sources[o.id]={id:o.id}),this.memoryManager.save(e),this.createSourceMemory(o)},this.run=function(e){this.checkColonyResourceRequirements(e),this.processColonyResources(e),this.processSpawning(e),this.processResourceRequests(e)},this.processColonyResources=function(e){(!e.lastResourceCheck||e.lastResourceCheck.level<this.game.rooms[e.mainRoom].controller.level)&&(this.addColonySources(e),this.checkColonyMinerals(e),this.addSourceOperations(e),e.lastResourceCheck=this.game.time),this.processSourceOperations(e),this.memoryManager.save()},this.addColonySources=function(e){const o=this.getColonyRooms(e);for(let t=0;t<o.length;t++){const r=o[t].find(FIND_SOURCES);for(let o=0;o<r.length;o++){const t=r[o];this.addSourceToColony(e,t)}}},this.checkColonyMinerals=function(e){},this.addSourceOperations=function(e){for(const o in e.sources){let e=this.memoryManager.getById(OBJECT_TYPE_SOURCE_MEMORY,o);if(!e){const t=this.game.getObjectById(o);t&&(e=this.createSourceMemory(t))}if(e&&!e.operationId){const r=this.game.getObjectById(o);let s=this.operationManager.createSourceOperation(r);e.operationId=s.id,t.save(e)}}},this.createSourceMemory=function(e){return e.room.memory.colonyId?this.memoryManager.save({id:e.id,objectType:OBJECT_TYPE_SOURCE_MEMORY,operationId:0,colonyId:e.room.memory.colonyId}):null},this.getColonyRooms=function(e){if(!e.rooms){let o=[];for(let t=0;t<e.rooms.length;t++){const r=e.rooms[t];o.push(this.game.rooms[r])}return o}},this.checkColonyResourceRequirements=function(e){e.structureMap||this.generateColonyStructureMap(e),this.resourceManager.checkColonyResourceRequirements(e)},this.processSpawning=function(e){let o=[];for(const t in e.structureMap[STRUCTURE_SPAWN]){let r=this.game.getObjectById(e.structureMap[STRUCTURE_SPAWN][t].id);null!==r.spawning||r.memory.creepToSpawn||o.push(r)}if(o.length>0)for(let t=0;t<o.length;t++){let r=o[t];for(const o in e.spawnQueues){let t=e.spawnQueues[o];t.length>0&&(r.memory.creepToSpawn=t.shift())}}},this.processSourceOperations=function(e){for(const o in e.sources){let e=this.memoryManager.getById(OBJECT_TYPE_SOURCE_MEMORY,o);if(e.operationId){let o=this.memoryManager.getById(OBJECT_TYPE_SOURCE_OPERATION,e.operationId);this.operationManager.processSourceOperation(o)}}},this.generateColonyStructureMap=function(e){if(e.structureMap=this.createNewStructureMap(),e.rooms)for(let o=0;o<e.rooms.length;o++){const t=e.rooms[o];this.addRoomStructuresToColonyStructureMap(t,e)}else{const o=this.game.rooms[e.id];e.rooms.push(o.name),this.addRoomStructuresToColonyStructureMap(o,e)}},this.addRoomStructuresToColonyStructureMap=function(e,o){const t=e.find(FIND_MY_STRUCTURES);for(const e in t){const r=t[e];o.structureMap[r.structureType][r.id]=this.generateStructureMapItemFromStructure(r)}},this.createNewStructureMap=function(){return{spawn:{},extension:{},road:{},constructedWall:{},rampart:{},keeperLair:{},portal:{},controller:{},link:{},storage:{},tower:{},observer:{},powerBank:{},powerSpawn:{},extractor:{},lab:{},terminal:{},container:{},nuker:{}}},this.generateStructureMapItemFromStructure=function(e){return{id:e.id,pos:e.pos}},this.processResourceRequests=function(e){let o=null;!0===this.areAnyCreepsFree(e,CREEP_TYPE_TRANSPORTER)?o=CREEP_TYPE_TRANSPORTER:!0===this.areAnyCreepsFree(e,CREEP_TYPE_UTILITY)&&(o=CREEP_TYPE_UTILITY)},this.areAnyCreepsFree=function(e,o){return e.creepQueues||(e.creepQueues={}),e.creepQueues[o]||(e.creepQueues[o]={COLONY_CREEP_QUEUE_FREE:[],COLONY_CREEP_QUEUE_BUSY:[]}),e.creepQueues[o][COLONY_CREEP_QUEUE_FREE].length>0}}}]));