module.exports=function(e){var t={};function o(r){if(t[r])return t[r].exports;var n=t[r]={i:r,l:!1,exports:{}};return e[r].call(n.exports,n,n.exports,o),n.l=!0,n.exports}return o.m=e,o.c=t,o.d=function(e,t,r){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(o.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)o.d(r,n,function(t){return e[t]}.bind(null,n));return r},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=0)}([function(e,t,o){e.exports.loop=function(){o(1),o(2).run()}},function(e,t){global.PRIORITY_LOW="low",global.PRIORITY_MEDIUM="medium",global.PRIORITY_HIGH="high",global.OBJECT_TYPE_COLONY="colony",global.OBJECT_TYPE_RESOURCE_REQUEST="resourceRequest"},function(e,t,o){e.exports=function(e,t){if(!e||!t)throw"invalid arguements passed to app.js!";this.game=t;const r=o(3);this.memoryManager=new r(e);const n=o(4);this.resourceManager=new n(this.memoryManager,this.game);const s=o(5);this.colonyManager=new s(this.game,this.resourceManager,this.memoryManager),this.run=function(){console.log("run start");let e=this.memoryManager.getAll("colony");e||(e=this.mapColonies());for(const t in e){let o=e[t];colonyManager.run(o)}},this.mapColonies=function(){for(const e in this.game.rooms){const t=this.game.rooms[e];void 0!==t.controller&&null!==t.controller&&t.controller.my&&this.memoryManager.save(this.colonyManager.createColony(t))}return this.memoryManager.getAllColonies()}}},function(e,t){e.exports=function(e){this.memory=e,void 0!==this.memory&&void 0!==this.memory.settings||this.initialiseMemory(),this.initialiseMemory=function(){this.memory={colonies:{}}},this.getAllColonies=function(){return this.memory.colonies},this.getAll=function(e){return this.memory[e]},this.getById=function(e,t){return this.memory[e][t]},this.save=function(e){if(!e.objectType)throw"Error: object does not have a valid object type.";return this.memory[e.objectType]||(this.memory[e.objectType]={}),e.id||(e.id=this.getNextId(e.objectType)),this.memory[e.objectType][e.id]=e,e},this.getNextId=function(e){return this.memory.objectIds||(this.memory.objectIds={}),this.memory.objectIds[e]||(this.memory.objectIds[e]=0),this.memory.objectIds[e]++,this.memory.objectIds[e]}}},function(e,t){e.exports=function(e,t){this.memoryManager=e,this.game=t,this.createResourceRequest=function(e,t,o,r,n){let s={id:0,objectType:OBJECT_TYPE_RESOURCE_REQUEST,colonyId:e,pos:t,amount:o,resourceType:r,priority:n};return this.memoryManager.save(s)},this.checkColonyResourceRequirements=function(e){if(e.structureMap)for(const t in e.structureMap){const o=e.structureMap[t];for(const t in o){const o=this.game.getObjectById(t);let r=null;switch(o.structureType){case STRUCTURE_SPAWN:r=this.determineSpawnRequirements(o);break;case STRUCTURE_CONTROLLER:r=this.determineControllerRequirements(o)}r&&(r=this.resourceManager.addResourceRequest(r),e.resourceRequests[r.priority]||(e.resourceRequests[r.priority]=[]),e.resourceRequests[r.priority].push(r.id))}}this.memoryManager.save(e)},this.determineSpawnRequirements=function(e){if(e.memory.creepToSpawn&&!e.memory.requestId){let t=e.energyCapacity-e.energy;return this.createResourceRequest(e.room.colonyId,e.pos,t,RESOURCE_ENERGY,e.memory.creepToSpawn.priority)}},this.determineControllerRequirements=function(e){if(e.level<8)return this.createResourceRequest(e.room.colonyId,e.pos,0,RESOURCE_ENERGY,"low")}}},function(e,t){e.exports=function(e,t,o){this.game=e,this.resourceManager=t,this.memoryManager=o,this.createColony=function(e){let t={id:0,objectType:OBJECT_TYPE_COLONY,structureMap:this.createNewStructureMap(),mainRoom:e.name,rooms:[],resourceRequests:{},spawnQueues:{}};return t=this.memoryManager.save(t),this.addRoomToColony(e),t},this.addRoomToColony=function(e,t){t.memory.colonyId?console.log("Warning: this room is already assigned to a colony."):(this.room.memory.colonyId=e.id,e.rooms.push(t),this.memoryManager.save(e))},this.run=function(e){},this.checkColonyResourceRequirements=function(e){e.structureMap||this.generateColonyStructureMap(e),this.resourceManager.checkColonyResourceRequirements(e)},this.generateColonyStructureMap=function(e){if(e.structureMap=this.createNewStructureMap(),e.rooms)for(let t=0;t<e.rooms.length;t++){const o=e.rooms[t];this.addRoomStructuresToColonyStructureMap(o,e)}else{const t=this.game.rooms[e.id];e.rooms.push(t.name),this.addRoomStructuresToColonyStructureMap(t,e)}},this.addRoomStructuresToColonyStructureMap=function(e,t){const o=e.find(FIND_MY_STRUCTURES);for(const e in o){const r=o[e];t.structureMap[r.structureType][r.id]=this.generateStructureMapItemFromStructure(r)}},this.createNewStructureMap=function(){return{spawn:{},extension:{},road:{},constructedWall:{},rampart:{},keeperLair:{},portal:{},controller:{},link:{},storage:{},tower:{},observer:{},powerBank:{},powerSpawn:{},extractor:{},lab:{},terminal:{},container:{},nuker:{}}},this.generateStructureMapItemFromStructure=function(e){return{id:e.id,pos:e.pos}}}}]);